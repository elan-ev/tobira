# Auto-generated file: DO NOT EDIT DIRECTLY!
#
# This file is generated by `backend/src/cmd/export_api_schema.rs`. The
# API itself is defined in `backend/src/api`.

union Event = AuthorizedEvent | NotAllowed

type EventSearchResults {
  items: [SearchEvent!]!
}

type EventPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
  "The index of the first returned event."
  startIndex: Int
  "The index of the last returned event."
  endIndex: Int
}

input NewTextBlock {
  content: String!
}

"Arbitrary metadata for events/series. Serialized as JSON object."
scalar ExtraMetadata

enum VideoListOrder {
  NEW_TO_OLD
  OLD_TO_NEW
}

"A block just showing some text."
type TextBlock implements Block {
  content: String!
  id: ID!
  index: Int!
  realm: Realm!
}

"A realm name that is derived from a block of that realm."
type RealmNameFromBlock {
  block: RealmNameSourceBlock!
}

"An opaque cursor used for pagination"
scalar Cursor

"""
  Return type of the search API. `EmptyQuery` is only returned if the passed
  search query is empty. `SearchUnavailable` is returned if the backend
  search service is, for some reason, not available. Otherwise
  `SearchResults` is returned.
"""
union SearchOutcome = SearchUnavailable | EmptyQuery | SearchResults

type RemovedRealm {
  parent: Realm!
}

type SearchEvent implements Node {
  id: ID!
  title: String!
  seriesTitle: String
  description: String
  creators: [String!]!
  thumbnail: String
  duration: Int!
  isLive: Boolean!
  created: DateTimeUtc!
  startTime: DateTimeUtc
  endTime: DateTimeUtc
  hostRealms: [SearchRealm!]!
}

input ChildIndex {
  id: ID!
  index: Int!
}

type SyncedSeriesData {
  description: String
}

type EventConnection {
  pageInfo: EventPageInfo!
  items: [AuthorizedEvent!]!
  totalCount: Int!
}

"A simple realm name: a fixed string."
type PlainRealmName {
  name: String!
}

union RealmNameSource = PlainRealmName | RealmNameFromBlock

"A block just showing the list of videos in an Opencast series"
type SeriesBlock implements Block & RealmNameSourceBlock {
  series: Series
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
  id: ID!
  index: Int!
  realm: Realm!
}

"Represents an Opencast series."
type Series {
  id: ID!
  opencastId: String!
  title: String!
  syncedData: SyncedSeriesData
  hostRealms: [Realm!]!
  events(order: EventSortOrder = {column: "CREATED", direction: "DESCENDING"}): [AuthorizedEvent!]!
}

union EventSearchOutcome = SearchUnavailable | EmptyQuery | EventSearchResults

input NewVideoBlock {
  event: ID!
  showTitle: Boolean!
}

type SyncedEventData {
  updated: DateTimeUtc!
  startTime: DateTimeUtc
  endTime: DateTimeUtc
  "Duration in milliseconds"
  duration: Int!
  tracks: [Track!]!
  thumbnail: String
}

"A `Block`: a UI element that belongs to a realm."
interface Block {
  id: ID!
  index: Int!
  realm: Realm!
}

type NotAllowed {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

input UpdateVideoBlock {
  event: ID
  showTitle: Boolean
}

"A block for presenting a single Opencast event"
type VideoBlock implements Block & RealmNameSourceBlock {
  event: Event
  showTitle: Boolean!
  id: ID!
  index: Int!
  realm: Realm!
}

type SearchUnavailable {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

type AuthorizedEvent implements Node {
  id: ID!
  opencastId: String!
  isLive: Boolean!
  title: String!
  description: String
  created: DateTimeUtc!
  creators: [String!]!
  metadata: ExtraMetadata!
  syncedData: SyncedEventData
  "Whether the current user has write access to this event."
  canWrite: Boolean!
  series: Series
  "Returns a list of realms where this event is referenced (via some kind of block)."
  hostRealms: [Realm!]!
}

"A block just showing some title."
type TitleBlock implements Block {
  content: String!
  id: ID!
  index: Int!
  realm: Realm!
}

input RealmSpecifier {
  name: String
  pathSegment: String!
}

"A node with a globally unique ID. Mostly useful for relay."
interface Node {
  id: ID!
}

type Track {
  uri: String!
  flavor: String!
  mimetype: String
  resolution: [Int!]
}

type SearchResults {
  items: [Node!]!
}

input UpdateTextBlock {
  content: String
}

type Realm implements Node {
  id: ID!
  """
    The name of this realm or `null` if there is no name (for some reason).
    To find out why a realm has no name, you have to check `name_source`
    which gives you the raw information about the realm name.
  """
  name: String
  """
    The raw information about the name of the realm, showing where the name
    is coming from and if there is no name, why that is. Is `null` for the
    root realm, non-null for all other realms.
  """
  nameSource: RealmNameSource
  isRoot: Boolean!
  index: Int!
  """
    Specifies how the children of this realm should be ordered (e.g. in the
    navigation list). That's the responsibility of the frontend.
  """
  childOrder: RealmOrder!
  """
    Returns the trailing segment of this realm's path, without any instances of `/`.
    Empty for the root realm.
  """
  pathSegment: String!
  """
    Returns the full path of this realm. `"/"` for the root realm. For
    non-root realms, the path always starts with `/` and never has a
    trailing `/`.
  """
  path: String!
  "Returns the immediate parent of this realm."
  parent: Realm
  """
    Returns all ancestors between the root realm to this realm
    (excluding both, the root realm and this realm). It starts with a
    direct child of the root and ends with the parent of `self`.
  """
  ancestors: [Realm!]!
  """
    Returns all immediate children of this realm. The children are always
    ordered by the internal index. If `childOrder` returns an ordering
    different from `BY_INDEX`, the frontend is supposed to sort the
    children.
  """
  children: [Realm!]!
  "Returns the (content) blocks of this realm."
  blocks: [Block!]!
  """
    Returns the number of realms that are descendants of this one
    (excluding this one). Returns a number â‰¥ 0.
  """
  numberOfDescendants: Int!
  canCurrentUserEdit: Boolean!
  """
    Returns `true` if this realm somehow references the given node via
    blocks. Currently, the following rules are used:

    - If `id` refers to a series: returns `true` if the realm has a series
      block with that series.
    - If `id` refers to an event: returns `true` if the realm has a video
      block with that video OR if the realm has a series block with that
      event's series.
    - Otherwise, `false` is returned.
  """
  references(id: ID!): Boolean!
}

"Exactly one of `plain` or `block` has to be non-null."
input UpdatedRealmName {
  plain: String
  block: ID
}

type Mutation {
  "Adds a new realm."
  addRealm(realm: NewRealm!): Realm!
  """
    Sets the order of all children of a specific realm.

    `childIndices` must contain at least one element, i.e. do not call this
    for realms without children.
  """
  setChildOrder(parent: ID!, childOrder: RealmOrder!, childIndices: [ChildIndex!] = null): Realm!
  "Changes the name of a realm."
  renameRealm(id: ID!, name: UpdatedRealmName!): Realm!
  "Updates a realm's data."
  updateRealm(id: ID!, set: UpdateRealm!): Realm!
  "Remove a realm from the tree."
  removeRealm(id: ID!): RemovedRealm!
  """
    Adds a title block to a realm.

    The new block will be inserted at the given index,
    i.e. it will be at that position after the insert.
    Or, if you prefer to think about it this way:
    It will be inserted before the block that currently sits
    at that index.
  """
  addTitleBlock(realm: ID!, index: Int!, block: NewTitleBlock!): Realm!
  """
    Adds a text block to a realm.

    See `addTitleBlock` for more details.
  """
  addTextBlock(realm: ID!, index: Int!, block: NewTextBlock!): Realm!
  """
    Adds a series block to a realm.

    See `addTitleBlock` for more details.
  """
  addSeriesBlock(realm: ID!, index: Int!, block: NewSeriesBlock!): Realm!
  """
    Adds a video block to a realm.

    See `addTitleBlock` for more details.
  """
  addVideoBlock(realm: ID!, index: Int!, block: NewVideoBlock!): Realm!
  "Swap two blocks."
  swapBlocksByIndex(realm: ID!, indexA: Int!, indexB: Int!): Realm!
  "Update a title block's data."
  updateTitleBlock(id: ID!, set: UpdateTitleBlock!): Block!
  "Update a text block's data."
  updateTextBlock(id: ID!, set: UpdateTextBlock!): Block!
  "Update a series block's data."
  updateSeriesBlock(id: ID!, set: UpdateSeriesBlock!): Block!
  "Update a video block's data."
  updateVideoBlock(id: ID!, set: UpdateVideoBlock!): Block!
  "Remove a block from a realm."
  removeBlock(id: ID!): RemovedBlock!
  """
    Atomically mount a series into an (empty) realm.
    Creates all the necessary realms on the path to the target
    and adds a block with the given series at the leaf.
  """
  mountSeries(series: NewSeries!, parentRealmPath: String!, newRealms: [RealmSpecifier!]!): Realm!
}

input NewSeries {
  opencastId: String!
  title: String!
}

"DateTime"
scalar DateTimeUtc

type RemovedBlock {
  id: ID!
  realm: Realm!
}

type Query {
  "Returns the root realm."
  rootRealm: Realm!
  """
    Returns the realm with the specific ID or `None` if the ID does not
    refer to a realm.
  """
  realmById(id: ID!): Realm
  """
    Returns the realm with the given path or `None` if the path does not
    refer to a realm.

    Paths with and without trailing slash are accepted and treated equally.
    The paths `""` and `"/"` refer to the root realm. All other paths have
    to start with `"/"`.
  """
  realmByPath(path: String!, test: Boolean!): Realm
  "Returns an event by its Opencast ID."
  eventByOpencastId(id: String!): Event
  "Returns an event by its ID."
  eventById(id: ID!): Event
  "Returns a series by its Opencast ID."
  seriesByOpencastId(id: String!): Series
  "Returns a series by its ID."
  seriesById(id: ID!): Series
  "Returns a list of all series."
  allSeries: [Series!]!
  "Returns the current user."
  currentUser: User
  "Returns a new JWT that can be used to authenticate against Opencast for uploading videos."
  uploadJwt: String!
  "Retrieve a node by globally unique ID. Mostly useful for relay."
  node(id: ID!): Node
  "Returns `null` if the query is too short."
  search(query: String!): SearchOutcome!
  """
    Searches through all events (including non-listed ones). Requires
    moderator rights.
  """
  searchAllEvents(query: String!): EventSearchOutcome!
}

interface RealmNameSourceBlock {
  id: ID!
}

enum RealmOrder {
  BY_INDEX
  ALPHABETIC_ASC
  ALPHABETIC_DESC
}

type EmptyQuery {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

input UpdateSeriesBlock {
  series: ID
  showTitle: Boolean
  showMetadata: Boolean
  order: VideoListOrder
}

type SearchRealm implements Node {
  id: ID!
  name: String
  path: String!
  ancestorNames: [String]!
}

"Defines the sort order for events."
input EventSortOrder {
  column: EventSortColumn!
  direction: SortDirection!
}

input UpdateRealm {
  parent: ID
  pathSegment: String
}

input UpdateTitleBlock {
  content: String
}

enum EventSortColumn {
  TITLE
  CREATED
  UPDATED
}

input NewSeriesBlock {
  series: ID!
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
}

type User {
  "The username, a unique string identifying the user."
  username: String!
  roles: [String!]!
  "The name of the user intended to be read by humans."
  displayName: String!
  "`True` if the user has the permission to upload videos."
  canUpload: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseStudio: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseEditor: Boolean!
  """
    Returns all events that somehow "belong" to the user, i.e. that appear
    on the "my videos" page.

    Exactly one of `first` and `last` must be set!
  """
  myVideos(order: EventSortOrder = {column: "CREATED", direction: "DESCENDING"}, first: Int, after: Cursor, last: Int, before: Cursor): EventConnection!
}

input NewRealm {
  parent: ID!
  name: String!
  pathSegment: String!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

input NewTitleBlock {
  content: String!
}

schema {
  query: Query
  mutation: Mutation
}
