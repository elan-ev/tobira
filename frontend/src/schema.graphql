# Auto-generated file: DO NOT EDIT DIRECTLY!
#
# This file is generated by `backend/src/cmd/export_api_schema.rs`. The
# API itself is defined in `backend/src/api`.

union Event = AuthorizedEvent | NotAllowed

type EventSearchResults {
  items: [SearchEvent!]!
}

input NewTitleBlock {
  content: String!
}

type EventPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
  "The index of the first returned event."
  startIndex: Int
  "The index of the last returned event."
  endIndex: Int
}

type Missing {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

"Arbitrary metadata for events/series. Serialized as JSON object."
scalar ExtraMetadata

enum VideoListOrder {
  NEW_TO_OLD
  OLD_TO_NEW
  AZ
  ZA
  ORIGINAL
}

input Filters {
  itemType: ItemType
  start: DateTimeUtc
  end: DateTimeUtc
}

"A block just showing some text."
type TextBlock implements Block {
  content: String!
  id: ID!
  index: Int!
  realm: Realm!
}

"A realm name that is derived from a block of that realm."
type RealmNameFromBlock {
  block: RealmNameSourceBlock!
}

"An opaque cursor used for pagination"
scalar Cursor

"""
  Return type of the search API. `EmptyQuery` is only returned if the passed
  search query is empty. `SearchUnavailable` is returned if the backend
  search service is, for some reason, not available. Otherwise
  `SearchResults` is returned.
"""
union SearchOutcome = SearchUnavailable | EmptyQuery | SearchResults

type KnownUser {
  displayName: String!
  userRole: String!
}

type RemovedRealm {
  parent: Realm
}

type SearchEvent implements Node {
  id: ID!
  seriesId: ID
  seriesTitle: String
  title: String!
  description: String
  creators: [String!]!
  thumbnail: String
  duration: Float!
  created: DateTimeUtc!
  startTime: DateTimeUtc
  endTime: DateTimeUtc
  isLive: Boolean!
  audioOnly: Boolean!
  hostRealms: [SearchRealm!]!
  textMatches: [TextMatch!]!
}

input ChildIndex {
  id: ID!
  index: Int!
}

input NewTextBlock {
  content: String!
}

"Represents an Opencast playlist."
type AuthorizedPlaylist {
  id: ID!
  opencastId: String!
  title: String!
  description: String
  entries: [VideoListEntry!]!
}

type SyncedSeriesData {
  description: String
}

type EventConnection {
  pageInfo: EventPageInfo!
  items: [AuthorizedEvent!]!
  totalCount: Int!
}

"A simple realm name: a fixed string."
type PlainRealmName {
  name: String!
}

union RealmNameSource = PlainRealmName | RealmNameFromBlock

"Some extra information we know about a role."
type RoleInfo {
  """
    A user-facing label for this role (group or person). If the label does
    not depend on the language (e.g. a name), `{ "_": "Peter" }` is
    returned.
  """
  label: TranslatedString!
  """
    For user roles this is `null`. For groups, it defines a list of other
    group roles that this role implies. I.e. a user with this role always
    also has these other roles.
  """
  implies: [String!]
  """
    Is `true` if this role represents a large group. Used to warn users
    accidentally giving write access to large groups.
  """
  large: Boolean!
}

"Represents an Opencast series."
type Series {
  id: ID!
  opencastId: String!
  title: String!
  created: DateTimeUtc
  metadata: ExtraMetadata
  syncedData: SyncedSeriesData
  hostRealms: [Realm!]!
  entries: [VideoListEntry!]!
  """
    Returns `true` if the realm has a series block with this series.
    Otherwise, `false` is returned.
  """
  isReferencedByRealm(path: String!): Boolean!
}

"A block just showing the list of videos in an Opencast series"
type SeriesBlock implements Block & RealmNameSourceBlock {
  series: Series
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
  layout: VideoListLayout!
  id: ID!
  index: Int!
  realm: Realm!
}

enum TextAssetType {
  CAPTION
  SLIDE_TEXT
}

union EventSearchOutcome = SearchUnavailable | EventSearchResults

"""
  A group selectable in the ACL UI. Basically a mapping from role to a nice
  label and info about the relationship to other roles/groups.
"""
type KnownGroup {
  role: String!
  label: TranslatedString!
  implies: [String!]!
  large: Boolean!
}

type SyncedEventData implements Node {
  updated: DateTimeUtc!
  startTime: DateTimeUtc
  endTime: DateTimeUtc
  "Duration in ms."
  duration: Float!
  tracks: [Track!]!
  thumbnail: String
  captions: [Caption!]!
  segments: [Segment!]!
}

input NewPlaylistBlock {
  playlist: ID!
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
  layout: VideoListLayout!
}

input NewVideoBlock {
  event: ID!
  showTitle: Boolean!
  showLink: Boolean!
}

type CreateRealmLineageOutcome {
  numCreated: Int!
}

"A `Block`: a UI element that belongs to a realm."
interface Block {
  id: ID!
  index: Int!
  realm: Realm!
}

type SearchPlaylist implements Node {
  id: ID!
  opencastId: String!
  title: String!
  description: String
  hostRealms: [SearchRealm!]!
}

union KnownUsersSearchOutcome = SearchUnavailable | KnownUserSearchResults

input UpdatedPermissions {
  moderatorRoles: [String!]
  adminRoles: [String!]
}

type NotAllowed {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

input UpdateVideoBlock {
  event: ID
  showTitle: Boolean
  showLink: Boolean
}

"A block for presenting a single Opencast event"
type VideoBlock implements Block & RealmNameSourceBlock {
  event: Event
  showTitle: Boolean!
  showLink: Boolean!
  id: ID!
  index: Int!
  realm: Realm!
}

type SearchUnavailable {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

input UpdatePlaylistBlock {
  playlist: ID
  showTitle: Boolean
  showMetadata: Boolean
  order: VideoListOrder
  layout: VideoListLayout
}

type AuthorizedEvent implements Node {
  id: ID!
  opencastId: String!
  isLive: Boolean!
  title: String!
  description: String
  created: DateTimeUtc!
  creators: [String!]!
  metadata: ExtraMetadata!
  "This doesn't contain `ROLE_ADMIN` as that is included implicitly."
  readRoles: [String!]!
  "This doesn't contain `ROLE_ADMIN` as that is included implicitly."
  writeRoles: [String!]!
  syncedData: SyncedEventData
  "Whether the current user has write access to this event."
  canWrite: Boolean!
  tobiraDeletionTimestamp: DateTimeUtc
  series: Series
  "Returns a list of realms where this event is referenced (via some kind of block)."
  hostRealms: [Realm!]!
  acl: [AclItem!]!
  """
    Returns `true` if the realm has a video block with this video
    OR if the realm has a series or playlist block including this video.
    Otherwise, `false` is returned.
  """
  isReferencedByRealm(path: String!): Boolean!
}

"A block just showing some title."
type TitleBlock implements Block {
  content: String!
  id: ID!
  index: Int!
  realm: Realm!
}

input RealmSpecifier {
  name: String
  pathSegment: String!
}

"A node with a globally unique ID. Mostly useful for relay."
interface Node {
  id: ID!
}

type SeriesSearchResults {
  items: [SearchSeries!]!
}

"A match inside an event's texts while searching."
type TextMatch {
  """
    Start of this timespan in number of milliseconds from the beginning of
    the video.
  """
  start: Float!
  "Duration of this timespan in number of milliseconds."
  duration: Float!
  "The text containing the match, with some context"
  text: String!
  "Source of this text."
  ty: TextAssetType!
  "Parts of `text` that should be highlighted."
  highlights: [ByteSpan!]!
}

type Track {
  uri: String!
  flavor: String!
  mimetype: String
  resolution: [Int!]
  isMaster: Boolean
}

type SearchResults {
  items: [Node!]!
  totalHits: Int!
}

input UpdateTextBlock {
  content: String
}

type ByteSpan {
  start: Int!
  len: Int!
}

union Playlist = AuthorizedPlaylist | NotAllowed

type Realm implements Node {
  id: ID!
  """
    The name of this realm or `null` if there is no name (for some reason).
    To find out why a realm has no name, you have to check `name_source`
    which gives you the raw information about the realm name.
  """
  name: String
  """
    The raw information about the name of the realm, showing where the name
    is coming from and if there is no name, why that is. Is `null` for the
    root realm, non-null for all other realms.
  """
  nameSource: RealmNameSource
  "Returns `true` if this is the root of the public realm tree (with path = \"/\")."
  isMainRoot: Boolean!
  "Returns true if this is the root of a user realm tree."
  isUserRoot: Boolean!
  "Returns `true` if this realm is managed by a user (path starting with `/@`)."
  isUserRealm: Boolean!
  index: Int!
  """
    Specifies how the children of this realm should be ordered (e.g. in the
    navigation list). That's the responsibility of the frontend.
  """
  childOrder: RealmOrder!
  """
    Returns the trailing segment of this realm's path, without any instances of `/`.
    Empty for the main root realm.
  """
  pathSegment: String!
  """
    Returns the full path of this realm. `"/"` for the main root realm.
    Otherwise it never has a trailing `/`. For user realms, starts with
    `/@`.
  """
  path: String!
  """
    This only returns a value for root user realms, in which case it is
    the display name of the user who owns this realm. For all other realms,
    `null` is returned.
  """
  ownerDisplayName: String
  """
    Returns the acl of this realm, combining moderator and admin roles and assigns
    the respective actions that are necessary for UI purposes.
  """
  ownAcl: [AclItem!]!
  """
    Returns the combined acl of this realm's parent, which effectively contains
    the acl and inherited acl of each ancestor realm. This is used to display
    these roles in the permissions UI, where we don't want to show that realm's own
    flattened acl since that also contains the realm's "regular", i.e. non-inherited
    acl.
  """
  inheritedAcl: [AclItem!]!
  "Returns the immediate parent of this realm."
  parent: Realm
  """
    Returns all ancestors between the root realm to this realm
    (excluding both, the root realm and this realm). It starts with a
    direct child of the root and ends with the parent of `self`.
  """
  ancestors: [Realm!]!
  """
    Returns all immediate children of this realm. The children are always
    ordered by the internal index. If `childOrder` returns an ordering
    different from `BY_INDEX`, the frontend is supposed to sort the
    children.
  """
  children: [Realm!]!
  "Returns the (content) blocks of this realm."
  blocks: [Block!]!
  """
    Returns the number of realms that are descendants of this one
    (excluding this one). Returns a number ≥ 0.
  """
  numberOfDescendants: Int!
  """
    Returns whether the current user has the rights to add sub-pages, edit realm content,
    and edit settings including changing the realm path, deleting the realm and editing
    the realm's acl.
  """
  isCurrentUserPageAdmin: Boolean!
  """
    Returns whether the current user has the rights to add sub-pages and edit realm content
    and non-critical settings.
  """
  canCurrentUserModerate: Boolean!
}

"A block just showing the list of videos in an Opencast playlist"
type PlaylistBlock implements Block & RealmNameSourceBlock {
  playlist: Playlist
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
  layout: VideoListLayout!
  id: ID!
  index: Int!
  realm: Realm!
}

"A role being granted permission to perform certain actions."
type AclItem {
  "Role. In arrays of AclItems, no two items have the same `role`."
  role: String!
  """
    List of actions this role can perform (e.g. `read`, `write`,
    `annotate`). This is a set, i.e. no duplicate elements.
  """
  actions: [String!]!
  """
    Additional info we have about the role. Is `null` if the role is unknown
    or is `ROLE_ANONYMOUS`, `ROLE_ADMIN` or `ROLE_USER`, as those are
    handled in a special way in the frontend.
  """
  info: RoleInfo
}

union VideoListEntry = AuthorizedEvent | NotAllowed | Missing

union SeriesSearchOutcome = SearchUnavailable | SeriesSearchResults

type Mutation {
  "Adds a new realm."
  addRealm(realm: NewRealm!): Realm!
  "Creates the current users realm. Errors if it already exists."
  createMyUserRealm: Realm!
  """
    Deletes the given event. Meaning: a deletion request is sent to Opencast, the event
    is marked as "deletion pending" in Tobira, and fully removed once Opencast
    finished deleting the event.

    Returns the deletion timestamp in case of success and errors otherwise.
    Note that "success" in this case only means the request was successfully sent
    and accepted, not that the deletion itself succeeded, which is instead checked
    in subsequent harvesting results.
  """
  deleteVideo(id: ID!): RemovedEvent!
  """
    Sets the order of all children of a specific realm.

    `childIndices` must contain at least one element, i.e. do not call this
    for realms without children.
  """
  setChildOrder(parent: ID!, childOrder: RealmOrder!, childIndices: [ChildIndex!] = null): Realm!
  "Changes the name of a realm."
  renameRealm(id: ID!, name: UpdatedRealmName!): Realm!
  "Changes the moderator and/or admin roles of a realm."
  updatePermissions(id: ID!, permissions: UpdatedPermissions!): Realm!
  "Updates a realm's data."
  updateRealm(id: ID!, set: UpdateRealm!): Realm!
  "Remove a realm from the tree."
  removeRealm(id: ID!): RemovedRealm!
  """
    Adds a title block to a realm.

    The new block will be inserted at the given index,
    i.e. it will be at that position after the insert.
    Or, if you prefer to think about it this way:
    It will be inserted before the block that currently sits
    at that index.
  """
  addTitleBlock(realm: ID!, index: Int!, block: NewTitleBlock!): Realm!
  """
    Adds a text block to a realm.

    See `addTitleBlock` for more details.
  """
  addTextBlock(realm: ID!, index: Int!, block: NewTextBlock!): Realm!
  """
    Adds a series block to a realm.

    See `addTitleBlock` for more details.
  """
  addSeriesBlock(realm: ID!, index: Int!, block: NewSeriesBlock!): Realm!
  """
    Adds a playlist block to a realm.

    See `addTitleBlock` for more details.
  """
  addPlaylistBlock(realm: ID!, index: Int!, block: NewPlaylistBlock!): Realm!
  """
    Adds a video block to a realm.

    See `addTitleBlock` for more details.
  """
  addVideoBlock(realm: ID!, index: Int!, block: NewVideoBlock!): Realm!
  "Swap two blocks."
  swapBlocksByIndex(realm: ID!, indexA: Int!, indexB: Int!): Realm!
  "Update a title block's data."
  updateTitleBlock(id: ID!, set: UpdateTitleBlock!): Block!
  "Update a text block's data."
  updateTextBlock(id: ID!, set: UpdateTextBlock!): Block!
  "Update a series block's data."
  updateSeriesBlock(id: ID!, set: UpdateSeriesBlock!): Block!
  "Update a playlist block's data."
  updatePlaylistBlock(id: ID!, set: UpdatePlaylistBlock!): Block!
  "Update a video block's data."
  updateVideoBlock(id: ID!, set: UpdateVideoBlock!): Block!
  "Remove a block from a realm."
  removeBlock(id: ID!): RemovedBlock!
  """
    Basically `mkdir -p` for realms: makes sure the given realm lineage
    exists, creating the missing realms. Existing realms are *not* updated.
    Each realm in the given list is the sub-realm of the previous item in
    the list. The first item is sub-realm of the root realm.
  """
  createRealmLineage(realms: [RealmLineageComponent!]!): CreateRealmLineageOutcome!
  "Stores series information in Tobira's DB, so it can be mounted without having to be harvested first."
  announceSeries(series: NewSeries!): Series!
  "Adds a series block to an empty realm and makes that realm derive its name from said series."
  addSeriesMountPoint(seriesOcId: String!, targetPath: String!): Realm!
  """
    Removes the series block of given series from the given realm.
    If the realm has sub-realms and used to derive its name from the block,
    it is renamed to its path segment. If the realm has no sub-realms,
    it is removed completely.
    Errors if the given realm does not have exactly one series block referring to the
    specified series.
  """
  removeSeriesMountPoint(seriesOcId: String!, path: String!): RemoveMountedSeriesOutcome!
  """
    Atomically mount a series into an (empty) realm.
    Creates all the necessary realms on the path to the target
    and adds a block with the given series at the leaf.
  """
  mountSeries(series: NewSeries!, parentRealmPath: String!, newRealms: [RealmSpecifier!]!): Realm!
}

"Exactly one of `plain` or `block` has to be non-null."
input UpdatedRealmName {
  plain: String
  block: ID
}

input NewSeries {
  opencastId: String!
  title: String!
}

"DateTime"
scalar DateTimeUtc

type Caption {
  uri: String!
  lang: String
}

type KnownUserSearchResults {
  items: [KnownUser!]!
}

type RemovedBlock {
  id: ID!
  realm: Realm!
}

type Query {
  "Returns the main root realm."
  rootRealm: Realm!
  """
    Returns the realm with the specific ID or `None` if the ID does not
    refer to a realm.
  """
  realmById(id: ID!): Realm
  """
    Returns the realm with the given path or `null` if the path does not
    refer to a realm.

    Paths with and without trailing slash are accepted and treated equally.
    The paths `""` and `"/"` refer to the root realm. All other paths have
    to start with `"/"`. Paths starting with `"/@"` are considered user
    root realms.
  """
  realmByPath(path: String!): Realm
  "Returns an event by its Opencast ID."
  eventByOpencastId(id: String!): Event
  "Returns an event by its ID."
  eventById(id: ID!): Event
  "Returns a series by its Opencast ID."
  seriesByOpencastId(id: String!): Series
  "Returns a series by its ID."
  seriesById(id: ID!): Series
  "Returns a playlist by its Opencast ID."
  playlistByOpencastId(id: String!): Playlist
  "Returns a playlist by its ID."
  playlistById(id: ID!): Playlist
  "Returns the current user."
  currentUser: User
  "Returns a new JWT that can be used to authenticate against Opencast for using the given service"
  jwt(service: JwtService!): String!
  "Retrieve a node by globally unique ID. Mostly useful for relay."
  node(id: ID!): Node
  "Returns `null` if the query is too short."
  search(query: String!, filters: Filters!): SearchOutcome!
  """
    Searches through events. Results include:

    - Events that the user has write access to (listed & unlisted).
    - If `writable_only` is false, this also searches through videos that
      the user has read access to. However, unless the user has the
      privilege to find unlisted events, only listed ones are searched.
  """
  searchAllEvents(query: String!, writableOnly: Boolean!): EventSearchOutcome!
  """
    Searches through series. Searches through:

    - Series that the user has write access to (listed & unlisted).
    - If `writable_only` is false, this also searches through listed series.
      If the user has the privilege to find unlisted series, all series are
      searched.
  """
  searchAllSeries(query: String!, writableOnly: Boolean!): SeriesSearchOutcome!
  """
    Searches through playlists. Results may include:

    - Playlists that the user has write access to (listed & unlisted).
    - If `writable_only` is false, this also searches through listed playlists.
      If the user has the privilege to find unlisted playlists, all playlists are
      searched.
  """
  searchAllPlaylists(query: String!, writableOnly: Boolean!): PlaylistSearchOutcome!
  """
    Searches through all known users. The behavior of this depends on the
    `general.users_searchable` config value. If it is `false`, this returns
    only users that have an exact match with the input query. The number of
    results is limited to some fixed value.
  """
  searchKnownUsers(query: String!): KnownUsersSearchOutcome!
  "Returns all known groups selectable in the ACL UI."
  knownGroups: [KnownGroup!]!
}

interface RealmNameSourceBlock {
  id: ID!
}

enum RealmOrder {
  BY_INDEX
  ALPHABETIC_ASC
  ALPHABETIC_DESC
}

type EmptyQuery {
  """
    Unused dummy field for this marker type. GraphQL requires all objects to
    have at least one field. Always returns `null`.
  """
  dummy: Boolean
}

union RemoveMountedSeriesOutcome = RemovedRealm | RemovedBlock

union PlaylistSearchOutcome = SearchUnavailable | PlaylistSearchResults

"A string in different languages"
scalar TranslatedString

type PlaylistSearchResults {
  items: [SearchPlaylist!]!
}

input UpdateSeriesBlock {
  series: ID
  showTitle: Boolean
  showMetadata: Boolean
  order: VideoListOrder
  layout: VideoListLayout
}

type SearchRealm implements Node {
  id: ID!
  name: String
  path: String!
  ancestorNames: [String]!
}

"Defines the sort order for events."
input EventSortOrder {
  column: EventSortColumn!
  direction: SortDirection!
}

type RemovedEvent {
  id: ID!
}

input UpdateRealm {
  parent: ID
  pathSegment: String
}

input UpdateTitleBlock {
  content: String
}

enum ItemType {
  EVENT
  SERIES
  REALM
}

input RealmLineageComponent {
  name: String!
  pathSegment: String!
}

enum EventSortColumn {
  TITLE
  CREATED
  UPDATED
}

input NewSeriesBlock {
  series: ID!
  showTitle: Boolean!
  showMetadata: Boolean!
  order: VideoListOrder!
  layout: VideoListLayout!
}

type SearchSeries implements Node {
  id: ID!
  opencastId: String!
  title: String!
  description: String
  hostRealms: [SearchRealm!]!
  thumbnails: [ThumbnailInfo!]!
}

type ThumbnailInfo {
  thumbnail: String
  isLive: Boolean!
  audioOnly: Boolean!
}

type User {
  "The username, a unique string identifying the user."
  username: String!
  email: String
  """
    Roles of the user. Note: the frontend should not do any role matching itself,
    but should rely on Boolean API endpoints like `canUpload` or `event.canWrite`.
    This endpoint is only for debugging and for special cases like the ACL selector.
  """
  roles: [String!]!
  """
    Returns the *user role* of this user. Each user has exactly one and this
    role is used in ACLs to give access to a single user. This role is
    always also contained in `roles`.
  """
  userRole: String!
  "The name of the user intended to be read by humans."
  displayName: String!
  "`True` if the user has the permission to upload videos."
  canUpload: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseStudio: Boolean!
  "`True` if the user has the permission to use Opencast Studio."
  canUseEditor: Boolean!
  canCreateUserRealm: Boolean!
  "`True` if the user is allowed to find unlisted items when editing page content."
  canFindUnlisted: Boolean!
  """
    Returns all events that somehow "belong" to the user, i.e. that appear
    on the "my videos" page. This also returns events that have been marked
    as deleted (meaning their deletion in Opencast has been requested but they
    are not yet removed from Tobira's database).

    Exactly one of `first` and `last` must be set!
  """
  myVideos(order: EventSortOrder = {column: "CREATED", direction: "DESCENDING"}, first: Int, after: Cursor, last: Int, before: Cursor): EventConnection!
}

input NewRealm {
  parent: ID!
  name: String!
  pathSegment: String!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

type Segment {
  uri: String!
  startTime: Float!
}

"Services a user can be pre-authenticated for using a JWT"
enum JwtService {
  UPLOAD
  STUDIO
  EDITOR
}

enum VideoListLayout {
  SLIDER
  GALLERY
  LIST
}

schema {
  query: Query
  mutation: Mutation
}
