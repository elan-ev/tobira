# This is a minimal nginx config to show how a login proxy works with Tobira. In
# your real nginx config, you should do a lot more things, like:
# - Compression
# - SSL termination
# - ... and lots more
#
# Do not simply copy this configuration into your production system without
# adjusting it and knowing what you're doing!

# For debugging
log_subrequest on;
rewrite_log on;

server {
    listen 3090;
    server_name dummy_login_proxy;

    # Forward almost all requests to Tobira, but remove auth headers!
    location / {
        proxy_set_header x-tobira-username "";
        proxy_set_header x-tobira-user-display-name "";
        proxy_set_header x-tobira-user-roles "";
        proxy_set_header Host $http_host;
        proxy_pass http://host.docker.internal:3080;
    }

    # Intercept requests to /~login
    location = /~login  {
        # `if` in nginx configs is considered evil, but in this case the easiest
        # solution. We use `rewrite ... last` here which is one of the two
        # things that is guaranteed to work in `if`.
        if ($request_method = POST) {
            rewrite ^ /~internal-login last;
        }

        # If it wasn't POST, we just forward to Tobira, but remove auth headers!
        proxy_set_header x-tobira-username "";
        proxy_set_header x-tobira-user-display-name "";
        proxy_set_header x-tobira-user-roles "";
        proxy_set_header Host $http_host;
        proxy_pass http://host.docker.internal:3080;
    }

    # We have a `POST /~login` request!
    #
    # To actually handle the login and authenticate the user, you have many options.
    # We just forward the request to our own mini server script. For successful
    # logins, that script will send `x-accel-redirect: /~successful-login`. That
    # way, nginx deals with forwarding the user data to Tobira to create a session.
    location = /~internal-login {
        internal;
        proxy_pass http://host.docker.internal:3091;
    }

    # Our dummy login script said the user data is correct and we should tell
    # Tobira to create a session.
    location = /~successful-login {
        internal;

        # Forward the authentication headers from the auth server. Yes, we need
        # to assign them to a variable first. It's weird.
        set $username $upstream_http_x_tobira_username;
        proxy_set_header x-tobira-username $username;
        set $display_name $upstream_http_x_tobira_user_display_name;
        proxy_set_header x-tobira-user-display-name $display_name;
        set $roles $upstream_http_x_tobira_user_roles;
        proxy_set_header x-tobira-user-roles $roles;

        # Send data to Tobira to create a session.
        proxy_pass_request_body off;
        proxy_set_header content-length '';
        proxy_set_header content-type '';
        proxy_method POST;
        proxy_pass 'http://host.docker.internal:3080/~session';
    }
}
