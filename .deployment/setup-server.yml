---

- hosts: all

  tasks:
    - name: install dependencies
      become: true
      package:
        state: present
        name:
          - postgresql-server
          - postgresql-contrib
          - python3
          - python3-psycopg2
          - nginx
          - nodejs

    - name: enable auto-updates
      become: true
      import_role:
        name: lkiesow.dnf_autoupdate


    # MeiliSearch

    - name: create MeiliSearch directory
      become: true
      file:
        path: /opt/meili
        state: directory
        mode: '0755'

    - name: install MeiliSearch
      become: true
      get_url:
        url: https://github.com/meilisearch/meilisearch/releases/download/v1.12.6/meilisearch-linux-amd64
        dest: /opt/meili/meilisearch
        mode: '0755'
        checksum: 'sha256:a9ca34a578fd1b3f5e68dab69f396bcc02cf0bfc1409c377efde25df43cb6809'
      register: meili_updated
      notify: restart MeiliSearch

    - name: remove MeiliSearch indexes
      become: true
      file:
        path: /opt/meili/data.ms
        state: absent
      when: meili_updated.changed

    - name: install MeiliSearch service file
      become: true
      template:
        src: meili.service
        dest: /etc/systemd/system/meili.service
        mode: '0644'
        owner: root
        group: root
      register: meili_service_changed
      notify: restart MeiliSearch

    - name: reload systemd due to service file changes
      become: true
      systemd:
        daemon_reload: true
        name: meili
        enabled: true
      when: meili_service_changed.changed

    - name: Flush handlers
      meta: flush_handlers

    # DATABASE

    - name: initialize database
      become: true
      command:
        cmd: postgresql-setup --initdb
        creates: /var/lib/pgsql/data/postgresql.conf
      environment:
        PGSETUP_INITDB_OPTIONS: "--auth-local=peer --auth-host=scram-sha-256"
      notify: restart postgresql

    - name: enable database
      become: true
      service:
        name: postgresql
        enabled: yes

    - name: Flush handlers
      meta: flush_handlers

    # Tobira

    - name: create tobira users
      become: true
      user:
        name: tobira

    - name: create logging directory
      become: true
      file:
        path: /var/log/tobira
        state: directory
        owner: tobira
        group: tobira
        mode: '0755'


    # Nginx

    - name: deploy nginx configuration
      become: true
      template:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
        mode: '0644'
        owner: root
        group: root
      notify: reload nginx

    - name: create ssl directory
      become: true
      file:
        path: /etc/nginx/ssl
        state: directory
        owner: nginx
        mode: '0755'

    - name: initial configuration for certificates
      become: true
      copy:
        src: ssl/{{ item.src }}
        dest: /etc/nginx/ssl/{{ item.dest }}
        owner: root
        group: root
        force: false
        mode: '0640'
      loop:
        - src: dhparam.pem
          dest: dhparam.pem
      notify: reload nginx

    - name: acquire SSL certificate
      become: true
      import_role:
        name: lkiesow.certbot_cloudflare
      vars:
        certbot_cloudflare_email: cloud@opencast.org
        certbot_cloudflare_api_token: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          65366633353265363462656262346364613564666164653239306335343736666636386639636635
          6232313465626334353362633766376533363532663532340a653365353563346235393665666430
          30666635376132376338313037653163383538623039333935616665396238333730613531633664
          6235393165376338640a363430393638346236663265616235633563393862336261666564333163
          31323466376464613738626435306633376633633266653263386165346166646238313232326339
          6537666639376535656563653563653533356166653666643233
        certbot_cloudflare_domains:
          - "tobira.opencast.org"
          - "*.tobira.opencast.org"
        certbot_cloudflare_post_hook: '--post-hook "systemctl reload nginx"'

    - name: link certificate
      become: true
      file:
        src: /etc/letsencrypt/live/tobira.opencast.org/{{ item.src }}
        dest: /etc/nginx/ssl/{{ item.dest  }}
        state: link
        force: true
      loop:
        - src: fullchain.pem
          dest: tobira.opencast.org.crt
        - src: privkey.pem
          dest: tobira.opencast.org.key
      notify: reload nginx

    - name: configure firewall
      become: true
      firewalld:
        service: '{{ item }}'
        state: enabled
        permanent: yes
        immediate: yes
      loop:
        - http
        - https

    - name: start and enable nginx
      become: true
      systemd:
        name: nginx
        state: started
        enabled: true


  handlers:
    - name: restart MeiliSearch
      become: true
      service:
        name: meili
        state: restarted

    - name: restart postgresql
      become: true
      service:
        name: postgresql
        state: restarted

    - name: reload nginx
      become: true
      service:
        name: nginx
        state: reloaded
